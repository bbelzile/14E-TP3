
name: deploiement-app
on:
  push:
    #branches: [master] 
    tags: ["TP3-V*"]
  pull_request:
    branches: [master]
      

jobs:
  job1:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  
                             

    env:
      Solution_Path: TP214E.sln   
      Project_Path: TP214E/TP214E.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
      
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Restore the application
      run: dotnet restore ${{ env.Project_Path }}
        
    - name: Build the application
      run: dotnet build ${{ env.Project_Path }} -c release --no-restore

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test
      
    - name: Publish the application
      run: dotnet publish ${{ env.Project_Path }} -c Release -r win-x64 --self-contained --no-build
      
    - name: Create a release  part 1
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}

    - name: Create a release part 2 
      uses: csexton/release-asset-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pattern: TP214E/bin/Release/netcoreapp3.1/win-x64/publish/TP214E.exe
        release-url: ${{ steps.create_release.outputs.upload_url }}

    - name: Step To run on failure
      if: ${{ failure() }}
      run: curl \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/octocat/hello-world/issues \
          -d '{"title":"title"}'
      #uses: octokit/request-action@v2.x
      #id: api-when-jobs-fail
      #with:
      #  route: POST /repos/bbelzile/14e-tp3/issues
      #  body: | 
      #      "{title: 'test-issues',body: 'body-test'}"
      #env:
      #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #run: |
      # curl --request POST \
      # --url https://api.github.com/repos/${{ github.repository }}/issues \
      # --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
      # --header 'content-type: application/json' \
      # --data '{
      #   "title": "Issue créee à cause d\'un échec du workflow': ${{ github.run_id }}",
      #   "body": "Issue crée automatiquement à partir de **${{ github.workflow }}**. \n\n à cause d\'une erreur: _${{ github.run_id }}_."
      #    }'

  #run-if-failed:
  #  runs-on: "windows-latest" 
  #  needs: job1
  #  if: (needs.job1.result == 'failure')
  #  steps:
  #  - name: creating issue
  #    uses: maxkomarychev/oction-create-issue@v0.7.1
  #    id: issue
  #    with:
  #      token: ${{ secrets.GITHUB_TOKEN }}
  #      title: Issue lors de release
  #  - name: Print outputs
  #    run: |
  #      echo ${{ steps.my_step_id.outputs.id }}
  #      echo ${{ steps.my_step_id.outputs.number }}

